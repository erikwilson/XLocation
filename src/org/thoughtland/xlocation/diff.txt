----- ActivityApp.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
188c188
< 		boolean odSystem = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false);
---
> 		boolean odSystem = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false);
372c372
< 		boolean odSystem = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false);
---
> 		boolean odSystem = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false);
699c699
< 			Intent intent = new Intent("org.thoughtland.xlocation.action.SUBMIT");
---
> 			Intent intent = new Intent("biz.bokhorst.xprivacy.action.SUBMIT");
707c707
< 		Intent intent = new Intent("org.thoughtland.xlocation.action.FETCH");
---
> 		Intent intent = new Intent("biz.bokhorst.xprivacy.action.FETCH");
-------------
----- ActivityBase.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
34c34
< 			String themeName = PrivacyManager.getSetting(userId, PrivacyManager.cSettingTheme, "Dark");
---
> 			String themeName = PrivacyManager.getSetting(userId, PrivacyManager.cSettingTheme, "");
-------------
----- ActivityMain.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
5d4
< import java.util.Arrays;
107c106
< 	public static final Uri cProUri = Uri.parse("http://www.xlocation.eu/");
---
> 	public static final Uri cProUri = Uri.parse("http://www.xprivacy.eu/");
217c216
< 					webview.loadUrl("https://github.com/M66B/XLocation#" + query);
---
> 					webview.loadUrl("https://github.com/M66B/XPrivacy#" + query);
302c301
< 								Uri.parse("https://github.com/M66B/XLocation/blob/master/CHANGELOG.md#xlocation3"));
---
> 								Uri.parse("https://github.com/M66B/XPrivacy/blob/master/CHANGELOG.md#xprivacy3"));
346c345
< 		// Handle clear XLocation data (needs UI refresh)
---
> 		// Handle clear XPrivacy data (needs UI refresh)
455c454
< 			boolean fUser = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingFUser, false);
---
> 			boolean fUser = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingFUser, true);
540c539
< 		boolean fUser = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingFUser, false);
---
> 		boolean fUser = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingFUser, true);
754c753
< 		boolean fUser = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingFUser, false);
---
> 		boolean fUser = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingFUser, true);
1010c1009
< 		String themeName = PrivacyManager.getSetting(userId, PrivacyManager.cSettingTheme, "Dark");
---
> 		String themeName = PrivacyManager.getSetting(userId, PrivacyManager.cSettingTheme, "");
1074c1073
< 		webview.loadUrl("https://github.com/M66B/XLocation/blob/master/CHANGELOG.md");
---
> 		webview.loadUrl("https://github.com/M66B/XPrivacy/blob/master/CHANGELOG.md");
1093c1092
< 		Util.viewUri(this, Uri.parse("https://github.com/M66B/XLocation#support"));
---
> 		Util.viewUri(this, Uri.parse("https://github.com/M66B/XPrivacy#support"));
2228c2227
< 		String restrictionName = PrivacyManager.getSetting(userId, PrivacyManager.cSettingSelectedCategory, "location");
---
> 		String restrictionName = PrivacyManager.getSetting(userId, PrivacyManager.cSettingSelectedCategory, null);
2242c2241
< 					int uid = getPackageManager().getPackageInfo("org.thoughtland.xlocation.pro", 0).applicationInfo.uid;
---
> 					int uid = getPackageManager().getPackageInfo("biz.bokhorst.xprivacy.pro", 0).applicationInfo.uid;
2245c2244
< 					startActivityForResult(new Intent("org.thoughtland.xlocation.pro.CHECK"), ACTIVITY_LICENSE);
---
> 					startActivityForResult(new Intent("biz.bokhorst.xprivacy.pro.CHECK"), ACTIVITY_LICENSE);
-------------
----- ActivitySettings.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
93c93
< 	public static final String ACTION_SETTINGS = "org.thoughtland.xlocation.action.SETTINGS";
---
> 	public static final String ACTION_SETTINGS = "biz.bokhorst.xprivacy.action.SETTINGS";
210c210
< 		boolean odsystem = PrivacyManager.getSettingBool(-uid, PrivacyManager.cSettingOnDemandSystem, false);
---
> 		boolean odsystem = PrivacyManager.getSettingBool(-uid, PrivacyManager.cSettingOnDemandSystem, false);
326c326
< 		odSystem = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false);
---
> 		odSystem = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false);
334c334
< 		String blFileName = Environment.getExternalStorageDirectory().getPath() + "/.xlocation/blacklist";
---
> 		String blFileName = Environment.getExternalStorageDirectory().getPath() + "/.xprivacy/blacklist";
-------------
----- ActivityShare.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
117,118c117,118
< 	public static final String HTTP_BASE_URL = "http://crowd.xlocation.eu/";
< 	public static final String HTTPS_BASE_URL = "https://crowd.xlocation.eu/";
---
> 	public static final String HTTP_BASE_URL = "http://crowd.xprivacy.eu/";
> 	public static final String HTTPS_BASE_URL = "https://crowd.xprivacy.eu/";
123,127c123,127
< 	public static final String ACTION_EXPORT = "org.thoughtland.xlocation.action.EXPORT";
< 	public static final String ACTION_IMPORT = "org.thoughtland.xlocation.action.IMPORT";
< 	public static final String ACTION_FETCH = "org.thoughtland.xlocation.action.FETCH";
< 	public static final String ACTION_SUBMIT = "org.thoughtland.xlocation.action.SUBMIT";
< 	public static final String ACTION_TOGGLE = "org.thoughtland.xlocation.action.TOGGLE";
---
> 	public static final String ACTION_EXPORT = "biz.bokhorst.xprivacy.action.EXPORT";
> 	public static final String ACTION_IMPORT = "biz.bokhorst.xprivacy.action.IMPORT";
> 	public static final String ACTION_FETCH = "biz.bokhorst.xprivacy.action.FETCH";
> 	public static final String ACTION_SUBMIT = "biz.bokhorst.xprivacy.action.SUBMIT";
> 	public static final String ACTION_TOGGLE = "biz.bokhorst.xprivacy.action.TOGGLE";
671c671
< 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XLocation.Toggle");
---
> 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XPrivacy.Toggle");
767c767
< 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XLocation.Export");
---
> 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XPrivacy.Export");
786c786
< 					serializer.startTag(null, "XLocation");
---
> 					serializer.startTag(null, "XPrivacy");
873c873
< 					serializer.endTag(null, "XLocation");
---
> 					serializer.endTag(null, "XPrivacy");
927c927
< 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XLocation.Import");
---
> 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XPrivacy.Import");
1058c1058
< 				if (qName.equals("XLocation")) {
---
> 				if (qName.equals("XPrivacy")) {
1220c1220
< 			if (qName.equals("XLocation")) {
---
> 			if (qName.equals("XPrivacy")) {
1279c1279
< 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XLocation.Fetch");
---
> 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XPrivacy.Fetch");
1322c1322
< 						jRoot.put("xlocation_version", xInfo.versionCode);
---
> 						jRoot.put("xprivacy_version", xInfo.versionCode);
1447c1447
< 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XLocation.Submit");
---
> 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XPrivacy.Submit");
1586c1586
< 						jRoot.put("xlocation_version", pInfo.versionCode);
---
> 						jRoot.put("xprivacy_version", pInfo.versionCode);
1745c1745
< 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XLocation.Register");
---
> 			PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "XPrivacy.Register");
1881,1882c1881,1882
< 				jRoot.put("xlocation_version", Util.getSelfVersionCode(mContext));
< 				jRoot.put("xlocation_version_name", Util.getSelfVersionName(mContext));
---
> 				jRoot.put("xprivacy_version", Util.getSelfVersionCode(mContext));
> 				jRoot.put("xprivacy_version_name", Util.getSelfVersionName(mContext));
2025c2025
< 		Uri uri = Uri.parse(Environment.getExternalStorageDirectory().getPath() + "/.xlocation/");
---
> 		Uri uri = Uri.parse(Environment.getExternalStorageDirectory().getPath() + "/.xprivacy/");
2048c2048
< 				+ ".xlocation");
---
> 				+ ".xprivacy");
2053c2053
< 			fileName = String.format("%s_XLocation_%s_%s%s.xml", format.format(new Date()),
---
> 			fileName = String.format("%s_XPrivacy_%s_%s%s.xml", format.format(new Date()),
2056c2056
< 			fileName = "XLocation.xml";
---
> 			fileName = "XPrivacy.xml";
-------------
----- ActivityUsage.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
303c303
< 									PrivacyManager.cSettingOnDemandSystem, false);
---
> 									PrivacyManager.cSettingOnDemandSystem, false);
-------------
----- ApplicationEx.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- ApplicationInfoEx.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
164,165c164
< 				if (pm.checkPermission("android.permission.ACCESS_FINE_LOCATION",appInfo.packageName)
< 						== PackageManager.PERMISSION_GRANTED) {
---
> 				if (pm.checkPermission("android.permission.INTERNET", appInfo.packageName) == PackageManager.PERMISSION_GRANTED) {
-------------
----- BootReceiver.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
23c23
< 			context.sendBroadcast(new Intent("org.thoughtland.xlocation.action.ACTIVE"));
---
> 			context.sendBroadcast(new Intent("biz.bokhorst.xprivacy.action.ACTIVE"));
-------------
----- CRestriction.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- CSetting.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- DeviceAdministratorReceiver.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- diff.txt
-------------
----- Hook.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
151c151
< 			if ("true".equals(System.getenv("XLocation.AOSP")))
---
> 			if ("true".equals(System.getenv("XPrivacy.AOSP")))
-------------
----- IniFile.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- IPrivacyService.aidl
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
3,4c3,4
< import org.thoughtland.xlocation.PRestriction;
< import org.thoughtland.xlocation.PSetting;
---
> import biz.bokhorst.xprivacy.PRestriction;
> import biz.bokhorst.xprivacy.PSetting;
-------------
----- Meta.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
50a51,182
> 		mListHook.add(new Hook("accounts", "addOnAccountsUpdatedListener", "GET_ACCOUNTS", 5, null, null).notAOSP(19));
> 		mListHook.add(new Hook("accounts", "blockingGetAuthToken", "USE_CREDENTIALS", 5, null, null).dangerous().unsafe());
> 		mListHook.add(new Hook("accounts", "getAccounts", "GET_ACCOUNTS", 5, null, null).notAOSP(19));
> 		mListHook.add(new Hook("accounts", "getAccountsByType", "GET_ACCOUNTS", 5, null, null).notAOSP(19));
> 		mListHook.add(new Hook("accounts", "getAccountsByTypeAndFeatures", "GET_ACCOUNTS", 5, null, null).notAOSP(19));
> 		mListHook.add(new Hook("accounts", "getAuthToken", "USE_CREDENTIALS", 5, null, null).unsafe().dangerous());
> 		mListHook.add(new Hook("accounts", "getAuthTokenByFeatures", "MANAGE_ACCOUNTS", 5, null, null).unsafe().dangerous());
> 		mListHook.add(new Hook("accounts", "hasFeatures", "GET_ACCOUNTS", 8, null, null).unsafe().dangerous());
> 		mListHook.add(new Hook("accounts", "getAccountsByTypeForPackage", "GET_ACCOUNTS", 18, null, null).notAOSP(19));
> 
> 		mListHook.add(new Hook("accounts", "getTokenGoogle", "GET_ACCOUNTS", 1, null, null).unsafe().dangerous().optional());
> 		mListHook.add(new Hook("accounts", "getTokenWithNotificationGoogle", "GET_ACCOUNTS", 1, null, null).unsafe().dangerous().optional());
> 
> 		mListHook.add(new Hook("accounts", "getAuthenticatorTypes", "GET_ACCOUNTS", 5, "1.99.24", null).unsafe().dangerous());
> 		mListHook.add(new Hook("accounts", "getCurrentSync", "READ_SYNC_SETTINGS", 8, "1.99.24", null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("accounts", "getCurrentSyncs", "READ_SYNC_SETTINGS", 11, "1.99.24", null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("accounts", "getSyncAdapterTypes", "", 5, "1.99.24", null).unsafe().dangerous());
> 
> 		mListHook.add(new Hook("accounts", "Srv_getAccounts", "GET_ACCOUNTS", 19, "2.99", "getAccounts").AOSP(19));
> 		mListHook.add(new Hook("accounts", "Srv_getAccountsAsUser", "GET_ACCOUNTS", 19, "2.99", null).AOSP(19));
> 		mListHook.add(new Hook("accounts", "Srv_getAccountsByFeatures", "GET_ACCOUNTS", 19, "2.99", "getAccountsByTypeAndFeatures").AOSP(19));
> 		mListHook.add(new Hook("accounts", "Srv_getSharedAccountsAsUser", "GET_ACCOUNTS", 19, "2.99", null).AOSP(19));
> 		mListHook.add(new Hook("accounts", "Srv_getCurrentSyncs", "READ_SYNC_SETTINGS", 19, "2.99", "getCurrentSyncs").AOSP(19));
> 
> 		mListHook.add(new Hook("browser", "BrowserProvider2", "com.android.browser.permission.READ_HISTORY_BOOKMARKS,GLOBAL_SEARCH", 1, null, null));
> 		mListHook.add(new Hook("browser", "Downloads", "ACCESS_DOWNLOAD_MANAGER,ACCESS_DOWNLOAD_MANAGER_ADVANCED,ACCESS_ALL_DOWNLOADS", 1, "1.99.43", null).dangerous());
> 
> 		mListHook.add(new Hook("calendar", "CalendarProvider2", "READ_CALENDAR,WRITE_CALENDAR", 1, null, null));
> 
> 		mListHook.add(new Hook("calling", "sendDataMessage", "SEND_SMS", 4, null, null).notAOSP(19).whitelist(cTypeAddress).doNotify());
> 		mListHook.add(new Hook("calling", "sendMultipartTextMessage", "SEND_SMS", 4, null, null).notAOSP(19).whitelist(cTypeAddress).doNotify());
> 		mListHook.add(new Hook("calling", "sendTextMessage", "SEND_SMS", 4, null, null).notAOSP(19).whitelist(cTypeAddress).doNotify());
> 
> 		mListHook.add(new Hook("calling", "Srv_sendData", "SEND_SMS", 19, "2.99", "sendDataMessage").AOSP(19).whitelist(cTypeAddress).doNotify());
> 		mListHook.add(new Hook("calling", "Srv_sendMultipartText", "SEND_SMS", 19, "2.99", "sendMultipartTextMessage").AOSP(19).whitelist(cTypeAddress).doNotify());
> 		mListHook.add(new Hook("calling", "Srv_sendText", "SEND_SMS", 19, "2.99", "sendTextMessage").AOSP(19).whitelist(cTypeAddress).doNotify());
> 
> 		mListHook.add(new Hook("calling", TelephonyManager.ACTION_RESPOND_VIA_MESSAGE, "SEND_RESPOND_VIA_MESSAGE", 18, null, null).doNotify());
> 		mListHook.add(new Hook("calling", Intent.ACTION_CALL, "CALL_PHONE", 10, null, null).doNotify());
> 		mListHook.add(new Hook("calling", Intent.ACTION_DIAL, "", 10, "2.2.2", null).doNotify());
> 		mListHook.add(new Hook("calling", Intent.ACTION_NEW_OUTGOING_CALL, "PROCESS_OUTGOING_CALLS", 10, "2.1.23", "phone/android.intent.action.NEW_OUTGOING_CALL").doNotify());
> 		mListHook.add(new Hook("calling", "CallLogProvider", "READ_CALL_LOG,WRITE_CALL_LOG", 1, "2.1.23", "phone/CallLogProvider"));
> 
> 		mListHook.add(new Hook("calling", "SIP.isApiSupported", "USE_SIP", 9, null, null).unsafe().doNotify());
> 		mListHook.add(new Hook("calling", "SIP.isSipWifiOnly", "USE_SIP", 9, null, null).unsafe().doNotify());
> 		mListHook.add(new Hook("calling", "SIP.isVoipSupported", "USE_SIP", 9, null, null).unsafe().doNotify());
> 		mListHook.add(new Hook("calling", "SIP.newInstance", "USE_SIP", 9, null, null).unsafe().doNotify());
> 
> 		mListHook.add(new Hook("clipboard", "addPrimaryClipChangedListener", "", 11, null, null).notAOSP(19));
> 		mListHook.add(new Hook("clipboard", "getPrimaryClip", "", 11, null, null).notAOSP(19).doNotify());
> 		mListHook.add(new Hook("clipboard", "getPrimaryClipDescription", "", 11, null, null).notAOSP(19).doNotify());
> 		mListHook.add(new Hook("clipboard", "getText", "", 10, null, null).notAOSP(19).doNotify());
> 		mListHook.add(new Hook("clipboard", "hasPrimaryClip", "", 11, null, null).notAOSP(19).doNotify());
> 		mListHook.add(new Hook("clipboard", "hasText", "", 10, null, null).notAOSP(19).doNotify());
> 
> 		mListHook.add(new Hook("clipboard", "Srv_addPrimaryClipChangedListener", "", 19, "2.99", "addPrimaryClipChangedListener").AOSP(19));
> 		mListHook.add(new Hook("clipboard", "Srv_getPrimaryClip", "", 19, "2.99", "getPrimaryClip").AOSP(19).doNotify());
> 		mListHook.add(new Hook("clipboard", "Srv_getPrimaryClipDescription", "", 19, "2.99", "getPrimaryClipDescription").AOSP(19).doNotify());
> 		mListHook.add(new Hook("clipboard", "Srv_hasClipboardText", "", 19, "2.99", "hasText").AOSP(19).doNotify());
> 		mListHook.add(new Hook("clipboard", "Srv_hasPrimaryClip", "", 19, "2.99", "hasPrimaryClip").AOSP(19).doNotify());
> 
> 		mListHook.add(new Hook("contacts", "contacts/contacts", "READ_CONTACTS,WRITE_CONTACTS", 1, null, null));
> 		mListHook.add(new Hook("contacts", "contacts/data", "READ_CONTACTS,WRITE_CONTACTS", 1, null, null));
> 		mListHook.add(new Hook("contacts", "contacts/people", "READ_CONTACTS,WRITE_CONTACTS", 1, "1.99.46", null));
> 		mListHook.add(new Hook("contacts", "contacts/phone_lookup", "READ_CONTACTS,WRITE_CONTACTS", 1, null, null));
> 		mListHook.add(new Hook("contacts", "contacts/profile", "READ_PROFILE,WRITE_PROFILE", 1, "1.99.38", null).dangerous());
> 		mListHook.add(new Hook("contacts", "contacts/raw_contacts", "READ_CONTACTS,WRITE_CONTACTS", 1, null, null));
> 		mListHook.add(new Hook("contacts", "ContactsProvider2", "READ_CONTACTS,WRITE_CONTACTS,READ_PROFILE,WRITE_PROFILE", 1, "1.99.38", null).dangerous());
> 		mListHook.add(new Hook("contacts", "IccProvider", "READ_CONTACTS,WRITE_CONTACTS", 1, "1.99.38", null));
> 
> 		mListHook.add(new Hook("dictionary", "UserDictionary", "READ_USER_DICTIONARY", 1, null, null));
> 
> 		mListHook.add(new Hook("email", "EMailProvider", "com.android.email.permission.ACCESS_PROVIDER", 1, null, null));
> 		mListHook.add(new Hook("email", "GMailProvider", "com.google.android.gm.permission.READ_CONTENT_PROVIDER", 8, "1.99.20", null));
> 
> 		mListHook.add(new Hook("identification", "%hostname", "", 1, null, null).unsafe());
> 		mListHook.add(new Hook("identification", "%imei", "", 1, null, null).unsafe());
> 		mListHook.add(new Hook("identification", "%macaddr", "", 1, null, null).unsafe());
> 		mListHook.add(new Hook("identification", "%serialno", "", 1, null, null).unsafe());
> 		mListHook.add(new Hook("identification", "%cid", "", 1, null, null).unsafe());
> 		mListHook.add(new Hook("identification", "/proc", "", 1, "1.7", null).unsafe().dangerous().whitelist(cTypeProc));
> 		mListHook.add(new Hook("identification", "/system/build.prop", "", 1, "1.9.9", null).unsafe().dangerous());
> 		mListHook.add(new Hook("identification", "/sys/block/.../cid", "", 1, null, null).unsafe().dangerous());
> 		mListHook.add(new Hook("identification", "/sys/class/.../cid", "", 1, null, null).unsafe().dangerous());
> 		mListHook.add(new Hook("identification", "AdvertisingId", "", 1, null, null).unsafe().optional());
> 
> 		mListHook.add(new Hook("identification", "getString", "", 1, null, null).notAOSP(19));
> 		mListHook.add(new Hook("identification", "InputDevice.getDescriptor", "", 16, "2.2.2", "getDescriptor").unsafe());
> 		mListHook.add(new Hook("identification", "InputDevice.getName", "", 9, null, null).unsafe());
> 		mListHook.add(new Hook("identification", "GservicesProvider", "com.google.android.providers.gsf.permission.READ_GSERVICES,com.google.android.providers.gsf.permission.WRITE_GSERVICES", 1, null, null).dangerous());
> 		mListHook.add(new Hook("identification", "SERIAL", "", 1, null, null).restart().noUsageData());
> 
> 		mListHook.add(new Hook("identification", "USB.getDeviceId", "", 12, "2.1.7", null).unsafe());
> 		mListHook.add(new Hook("identification", "USB.getDeviceName", "", 12, "2.1.7", null).unsafe());
> 		mListHook.add(new Hook("identification", "USB.getSerialNumber", "", 20, "2.1.17", null).unsafe());
> 
> 		mListHook.add(new Hook("identification", "Srv_Android_ID", "", 19, "2.99", "getString").AOSP(19));
> 
> 		// java.net.NetworkInterface
> 		mListHook.add(new Hook("internet", "NetworkInterface.getByIndex", "INTERNET", 19, "2.2.2", null).unsafe());
> 		mListHook.add(new Hook("internet", "NetworkInterface.getByInetAddress", "INTERNET", 1, "2.2.2", "getByInetAddress").unsafe());
> 		mListHook.add(new Hook("internet", "NetworkInterface.getByName", "INTERNET", 1, "2.2.2", "getByName").unsafe().dangerous().whitelist(cTypeIPAddress));
> 		mListHook.add(new Hook("internet", "NetworkInterface.getNetworkInterfaces", "INTERNET", 1, "2.2.2", "getNetworkInterfaces").unsafe());
> 
> 		mListHook.add(new Hook("internet", "inet", "INTERNET", 1, null, null).dangerous().restart().noUsageData());
> 		mListHook.add(new Hook("internet", "inet_admin", "NET_ADMIN", 1, "2.1.1", null).dangerous().restart().noUsageData());
> 		mListHook.add(new Hook("internet", "inet_bw", "READ_NETWORK_USAGE_HISTORY,MODIFY_NETWORK_ACCOUNTING", 1, "2.1.1", null).dangerous().restart().noUsageData());
> 		mListHook.add(new Hook("internet", "inet_vpn", "NET_TUNNELING", 1, "2.1.1", null).dangerous().restart().noUsageData());
> 		mListHook.add(new Hook("internet", "inet_mesh", "LOOP_RADIO", 1, "2.1.1", null).dangerous().restart().noUsageData());
> 
> 		// android.net.ConnectivityManager
> 		mListHook.add(new Hook("internet", "Connectivity.getActiveNetworkInfo", null, 1, "2.2.2", "getActiveNetworkInfo").unsafe().dangerous());
> 		mListHook.add(new Hook("internet", "Connectivity.getAllNetworkInfo", null, 1, "2.2.2", "getAllNetworkInfo").unsafe());
> 		mListHook.add(new Hook("internet", "Connectivity.getNetworkInfo", null, 1, "2.2.2", "getNetworkInfo").unsafe().dangerous());
> 
> 		// android.net.NetworkInfo
> 		mListHook.add(new Hook("internet", "NetworkInfo.getDetailedState", null, 1, "2.2.2", "getDetailedState").unsafe());
> 		mListHook.add(new Hook("internet", "NetworkInfo.getState", null, 1, "2.2.2", "getState").unsafe());
> 		mListHook.add(new Hook("internet", "NetworkInfo.isConnected", null, 1, "2.2.2", "isConnected").unsafe());
> 		mListHook.add(new Hook("internet", "NetworkInfo.isConnectedOrConnecting", null, 1, "2.2.2", "isConnectedOrConnecting").unsafe());
> 
> 		// android.net.wifi.WifiManager
> 		mListHook.add(new Hook("internet", "WiFi.getConnectionInfo", null, 10, "2.2.2", "getConnectionInfo").notAOSP(19));
> 		mListHook.add(new Hook("internet", "WiFi.Srv_getConnectionInfo", null, 10, "2.99", "WiFi.getConnectionInfo").AOSP(19));
> 
> 		// java.net.InetAddress
> 		mListHook.add(new Hook("internet", "InetAddress.getAllByName", "INTERNET", 1, null, null).unsafe().dangerous().whitelist(cTypeIPAddress));
> 		mListHook.add(new Hook("internet", "InetAddress.getByAddress", "INTERNET", 1, null, null).unsafe().dangerous().whitelist(cTypeIPAddress));
> 		mListHook.add(new Hook("internet", "InetAddress.getByName", "INTERNET", 1, null, null).unsafe().dangerous().whitelist(cTypeIPAddress));
> 
> 		mListHook.add(new Hook("internet", "connect", null, 1, "1.99.45", null).unsafe().dangerous().whitelist(cTypeIPAddress));
> 
110a243,495
> 		mListHook.add(new Hook("media", "Audio.startRecording", "RECORD_AUDIO", 3, "2.2.3", "startRecording").unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera.setPreviewCallback", "CAMERA", 1, "2.99.21", "setPreviewCallback").unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera.setPreviewCallbackWithBuffer", "CAMERA", 8, "2.99.21", null).unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera.setPreviewDisplay", "CAMERA", 1, "2.99.21", null).unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera.setPreviewTexture", "CAMERA", 11, "2.99.21", null).unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera.setOneShotPreviewCallback", "CAMERA", 11, "2.99.21", null).unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera.startPreview", "CAMERA", 1, "2.2.3", "setPreviewCallback").unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera.takePicture", "CAMERA", 1, "2.2.3", "takePicture").unsafe().doNotify());
> 		mListHook.add(new Hook("media", "MediaRecorder.start", "RECORD_AUDIO,RECORD_VIDEO", 1, "2.2.3", "setOutputFile").unsafe().doNotify());
> 		mListHook.add(new Hook("media", "MediaRecorder.setOutputFile", "RECORD_AUDIO,RECORD_VIDEO", 1, "2.99.20", "setOutputFile").unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera.permission", "CAMERA", 1, "2.2.3", null).dangerous().doNotify());
> 		mListHook.add(new Hook("media", "Record.Audio.permission", "RECORD_AUDIO", 3, "2.2.3", null).dangerous().doNotify());
> 		mListHook.add(new Hook("media", "Record.Video.permission", "RECORD_VIDEO", 3, "2.2.3", null).dangerous().doNotify());
> 
> 		mListHook.add(new Hook("media", MediaStore.ACTION_IMAGE_CAPTURE, "", 3, null, null).doNotify());
> 		mListHook.add(new Hook("media", MediaStore.ACTION_IMAGE_CAPTURE_SECURE, "", 17, null, null).doNotify());
> 		mListHook.add(new Hook("media", MediaStore.ACTION_VIDEO_CAPTURE, "", 3, null, null).doNotify());
> 
> 		mListHook.add(new Hook("media", "Camera2.capture", "CAMERA", 20, null, null).unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera2.captureBurst", "CAMERA", 20, null, null).unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera2.setRepeatingRequest", "CAMERA", 20, null, null).unsafe().doNotify());
> 		mListHook.add(new Hook("media", "Camera2.setRepeatingBurst", "CAMERA", 20, null, null).unsafe().doNotify());
> 
> 		mListHook.add(new Hook("messages", "getAllMessagesFromIcc", "RECEIVE_SMS", 10, null, null).notAOSP(19));
> 		mListHook.add(new Hook("messages", "Srv_getAllMessagesFromIccEf", "RECEIVE_SMS", 19, "2.99", "getAllMessagesFromIcc").AOSP(19));
> 
> 		mListHook.add(new Hook("messages", "SmsProvider", "READ_SMS,WRITE_SMS", 1, null, null));
> 		mListHook.add(new Hook("messages", "MmsProvider", "READ_SMS,WRITE_SMS", 1, null, null));
> 		mListHook.add(new Hook("messages", "MmsSmsProvider", "READ_SMS,WRITE_SMS", 1, null, null));
> 		mListHook.add(new Hook("messages", "VoicemailContentProvider", "com.android.voicemail.permission.READ_WRITE_ALL_VOICEMAIL", 1, null, null));
> 
> 		mListHook.add(new Hook("messages", Telephony.Sms.Intents.DATA_SMS_RECEIVED_ACTION, "RECEIVE_SMS", 1, null, null));
> 		mListHook.add(new Hook("messages", Telephony.Sms.Intents.SMS_RECEIVED_ACTION, "RECEIVE_SMS", 1, null, null));
> 		mListHook.add(new Hook("messages", Telephony.Sms.Intents.WAP_PUSH_RECEIVED_ACTION, "RECEIVE_WAP_PUSH", 1, null, null));
> 		mListHook.add(new Hook("messages", Telephony.Sms.Intents.SMS_DELIVER_ACTION, "BROADCAST_SMS", 19, "2.2.2", null));
> 		mListHook.add(new Hook("messages", Telephony.Sms.Intents.WAP_PUSH_DELIVER_ACTION, "BROADCAST_WAP_PUSH", 19, "2.2.2", null));
> 
> 		// android.bluetooth.BluetoothAdapter/BluetoothDevice
> 		mListHook.add(new Hook("network", "Bluetooth.getAddress", "BLUETOOTH", 5, "2.2.3", "getAddress").unsafe());
> 		mListHook.add(new Hook("network", "Bluetooth.getBondedDevices", "BLUETOOTH", 5, "2.2.3", "getBondedDevices").unsafe());
> 		mListHook.add(new Hook("network", "Bluetooth.Srv_getAddress", "BLUETOOTH", 5, "2.99", "getAddress").AOSP(19));
> 		mListHook.add(new Hook("network", "Bluetooth.Srv_getName", "BLUETOOTH", 5, "2.99", null).AOSP(19));
> 
> 		// java.net.NetworkInterface
> 		mListHook.add(new Hook("network", "NetworkInterface.getHardwareAddress", "ACCESS_NETWORK_STATE", 9, "2.2.2", "getHardwareAddress").unsafe());
> 		mListHook.add(new Hook("network", "NetworkInterface.getInetAddresses", "ACCESS_NETWORK_STATE", 9, "2.2.2", "getInetAddresses").unsafe());
> 		mListHook.add(new Hook("network", "NetworkInterface.getInterfaceAddresses", "ACCESS_NETWORK_STATE", 9, "2.2.2", "getInterfaceAddresses").unsafe());
> 
> 		// android.net.wifi.WifiManager
> 		mListHook.add(new Hook("network", "WiFi.getConfiguredNetworks", "ACCESS_WIFI_STATE", 10, "2.2.2", "getConfiguredNetworks").notAOSP(19));
> 		mListHook.add(new Hook("network", "WiFi.getConnectionInfo", "ACCESS_WIFI_STATE", 10, "2.2.2", "getConnectionInfo").notAOSP(19));
> 		mListHook.add(new Hook("network", "WiFi.getDhcpInfo", "ACCESS_WIFI_STATE", 10, "2.2.2", "getDhcpInfo").notAOSP(19));
> 		mListHook.add(new Hook("network", "WiFi.getScanResults", "ACCESS_WIFI_STATE", 10, "2.2.2", "getScanResults").notAOSP(19).dangerous());
> 		mListHook.add(new Hook("network", "WiFi.getWifiApConfiguration", "ACCESS_WIFI_STATE", 10, "2.2.2", "getWifiApConfiguration").notAOSP(19));
> 
> 		mListHook.add(new Hook("network", "WiFi.Srv_getBatchedScanResults", "ACCESS_WIFI_STATE", 10, "2.99", null).AOSP(19).dangerous());
> 		mListHook.add(new Hook("network", "WiFi.Srv_getConfiguredNetworks", "ACCESS_WIFI_STATE", 10, "2.99", "WiFi.getConfiguredNetworks").AOSP(19));
> 		mListHook.add(new Hook("network", "WiFi.Srv_getConnectionInfo", "ACCESS_WIFI_STATE", 10, "2.99", "WiFi.getConnectionInfo").AOSP(19));
> 		mListHook.add(new Hook("network", "WiFi.Srv_getDhcpInfo", "ACCESS_WIFI_STATE", 10, "2.99", "WiFi.getDhcpInfo").AOSP(19));
> 		mListHook.add(new Hook("network", "WiFi.Srv_getScanResults", "ACCESS_WIFI_STATE", 10, "2.99", "WiFi.getScanResults").AOSP(19).dangerous());
> 		mListHook.add(new Hook("network", "WiFi.Srv_getWifiApConfiguration", "ACCESS_WIFI_STATE", 10, "2.99", "WiFi.getWifiApConfiguration").AOSP(19));
> 
> 		mListHook.add(new Hook("network", "Srv_Default_DNS", "", 19, "2.99", "getString").AOSP(19).dangerous());
> 		mListHook.add(new Hook("network", "Srv_WiFi_Country", "", 19, "2.99", "getString").AOSP(19).dangerous());
> 
> 		// android.net.NetworkInfo
> 		mListHook.add(new Hook("network", "NetworkInfo.getExtraInfo", null, 1, "2.2.2", "internet/getExtraInfo").unsafe());
> 
> 		mListHook.add(new Hook("nfc", "getNfcAdapter", "NFC", 14, null, null).unsafe());
> 		mListHook.add(new Hook("nfc", "getDefaultAdapter", "NFC", 10, null, null).unsafe());
> 
> 		mListHook.add(new Hook("nfc", NfcAdapter.ACTION_ADAPTER_STATE_CHANGED, "NFC", 18, null, null));
> 		mListHook.add(new Hook("nfc", NfcAdapter.ACTION_NDEF_DISCOVERED, "NFC", 10, null, null));
> 		mListHook.add(new Hook("nfc", NfcAdapter.ACTION_TAG_DISCOVERED, "NFC", 10, null, null));
> 		mListHook.add(new Hook("nfc", NfcAdapter.ACTION_TECH_DISCOVERED, "NFC", 10, null, null));
> 
> 		mListHook.add(new Hook("notifications", "android.service.notification.NotificationListenerService", "BIND_NOTIFICATION_LISTENER_SERVICE", 18, null, null).unsafe());
> 		mListHook.add(new Hook("notifications", "com.google.android.c2dm.intent.REGISTRATION", "com.google.android.c2dm.permission.RECEIVE", 10, null, null).dangerous());
> 		mListHook.add(new Hook("notifications", "com.google.android.c2dm.intent.RECEIVE", "com.google.android.c2dm.permission.RECEIVE", 10, null, null).dangerous());
> 
> 		mListHook.add(new Hook("overlay", "addView", "SYSTEM_ALERT_WINDOW", 1, null, null).unsafe());
> 
> 		mListHook.add(new Hook("phone", "getDeviceId", "READ_PHONE_STATE", 10, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getGroupIdLevel1", "READ_PHONE_STATE", 18, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getIsimDomain", "READ_PRIVILEGED_PHONE_STATE", 14, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getIsimImpi", "READ_PRIVILEGED_PHONE_STATE", 14, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getIsimImpu", "READ_PRIVILEGED_PHONE_STATE", 14, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getLine1AlphaTag", "READ_PHONE_STATE", 10, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getLine1Number", "READ_PHONE_STATE", 10, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getMsisdn", "READ_PHONE_STATE", 14, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getSimSerialNumber", "READ_PHONE_STATE", 10, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getSubscriberId", "READ_PHONE_STATE", 10, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getVoiceMailAlphaTag", "READ_PHONE_STATE", 10, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "getVoiceMailNumber", "READ_PHONE_STATE", 10, null, null).notAOSP(19));
> 
> 		mListHook.add(new Hook("phone", "Srv_getDeviceId", "READ_PHONE_STATE", 10, "2.99", "getDeviceId").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getGroupIdLevel1", "READ_PHONE_STATE", 18, "2.99", "getGroupIdLevel1").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getIsimDomain", "READ_PRIVILEGED_PHONE_STATE", 14, "2.99", "getIsimDomain").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getIsimImpi", "READ_PRIVILEGED_PHONE_STATE", 14, "2.99", "getIsimImpi").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getIsimImpu", "READ_PRIVILEGED_PHONE_STATE", 14, "2.99", "getIsimImpu").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getLine1AlphaTag", "READ_PHONE_STATE", 10, "2.99", "getLine1AlphaTag").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getLine1Number", "READ_PHONE_STATE", 10, "2.99", "getLine1Number").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getMsisdn", "READ_PHONE_STATE", 14, "2.99", "getMsisdn").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getIccSerialNumber", "READ_PHONE_STATE", 10, "2.99", "getSimSerialNumber").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getSubscriberId", "READ_PHONE_STATE", 10, "2.99", "getSubscriberId").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getVoiceMailAlphaTag", "READ_PHONE_STATE", 10, "2.99", "getVoiceMailAlphaTag").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getVoiceMailNumber", "READ_PHONE_STATE", 10, "2.99", "getVoiceMailNumber").AOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_getCompleteVoiceMailNumber", "READ_PHONE_STATE", 10, "2.99", null).AOSP(19));
> 
> 		mListHook.add(new Hook("phone", "listen", "READ_PHONE_STATE", 10, null, null).notAOSP(19));
> 		mListHook.add(new Hook("phone", "Srv_listen", "READ_PHONE_STATE", 10, null, null).AOSP(19));
> 
> 		mListHook.add(new Hook("phone", "getNetworkCountryIso", "", 10, null, null).unsafe());
> 		mListHook.add(new Hook("phone", "getNetworkOperator", "", 10, null, null).unsafe());
> 		mListHook.add(new Hook("phone", "getNetworkOperatorName", "", 10, null, null).unsafe());
> 		mListHook.add(new Hook("phone", "getSimCountryIso", "", 10, null, null).unsafe());
> 		mListHook.add(new Hook("phone", "getSimOperator", "", 10, null, null).unsafe());
> 		mListHook.add(new Hook("phone", "getSimOperatorName", "", 10, null, null).unsafe());
> 
> 		mListHook.add(new Hook("phone", TelephonyManager.ACTION_PHONE_STATE_CHANGED, "READ_PHONE_STATE", 10, null, null));
> 		mListHook.add(new Hook("phone", "TelephonyProvider", "WRITE_APN_SETTINGS", 1, null, null));
> 
> 		mListHook.add(new Hook("phone", "Configuration.MCC", "", 1, "2.0", null).unsafe().noUsageData().noOnDemand());
> 		mListHook.add(new Hook("phone", "Configuration.MNC", "", 1, "2.0", null).unsafe().noUsageData().noOnDemand());
> 
> 		mListHook.add(new Hook("sensors", "getDefaultSensor", "", 3, null, null).unsafe().dangerous());
> 		mListHook.add(new Hook("sensors", "getSensorList", "", 3, null, null).unsafe().dangerous());
> 		mListHook.add(new Hook("sensors", "registerListener", "", 3, "2.99.27", null).unsafe());
> 		mListHook.add(new Hook("sensors", "acceleration", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "gravity", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "humidity", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "light", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "magnetic", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "motion", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "orientation", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "pressure", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "proximity", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "rotation", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "temperature", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "step", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("sensors", "heartrate", "", 20, null, null).unsafe());
> 
> 		mListHook.add(new Hook("shell", "sh", "", 10, null, null).unsafe().dangerous().whitelist(cTypeCommand));
> 		mListHook.add(new Hook("shell", "su", "", 10, null, null).unsafe().dangerous().whitelist(cTypeCommand));
> 		mListHook.add(new Hook("shell", "exec", "", 10, null, null).unsafe().dangerous().whitelist(cTypeCommand));
> 		mListHook.add(new Hook("shell", "load", "", 10, null, null).unsafe().dangerous().restart().whitelist(cTypeLibrary));
> 		mListHook.add(new Hook("shell", "loadLibrary", "", 10, null, null).unsafe().dangerous().restart().whitelist(cTypeLibrary));
> 		mListHook.add(new Hook("shell", "start", "", 10, null, null).unsafe().dangerous().whitelist(cTypeCommand));
> 
> 		mListHook.add(new Hook("storage", "media", "WRITE_MEDIA_STORAGE", 10, null, null).dangerous().restart().noUsageData());
> 		mListHook.add(new Hook("storage", "sdcard", "READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE,ACCESS_ALL_EXTERNAL_STORAGE", 10, null, null).dangerous().restart().noUsageData());
> 		mListHook.add(new Hook("storage", "mtp", "ACCESS_MTP", 10, "2.1.1", null).dangerous().restart().noUsageData());
> 		mListHook.add(new Hook("storage", "getExternalStorageState", null, 10, null, null).unsafe());
> 		mListHook.add(new Hook("storage", "open", null, 1, "1.99.46", null).unsafe().dangerous().whitelist(cTypeFilename));
> 
> 		mListHook.add(new Hook("storage", "openAssetFileDescriptor", null, 3, "2.1.17", null).unsafe().dangerous().whitelist(cTypeFilename));
> 		mListHook.add(new Hook("storage", "openFileDescriptor", null, 1, "2.1.17", null).unsafe().dangerous().whitelist(cTypeFilename));
> 		mListHook.add(new Hook("storage", "openInputStream", null, 1, "2.1.17", null).unsafe().dangerous().whitelist(cTypeFilename));
> 		mListHook.add(new Hook("storage", "openOutputStream", null, 1, "2.1.17", null).unsafe().dangerous().whitelist(cTypeFilename));
> 		mListHook.add(new Hook("storage", "openTypedAssetFileDescriptor", null, 11, "2.1.17", null).unsafe().dangerous().whitelist(cTypeFilename));
> 		mListHook.add(new Hook("storage", "openAssetFile", null, 5, "2.1.17", null).unsafe().dangerous().whitelist(cTypeFilename));
> 		mListHook.add(new Hook("storage", "openFile", null, 5, "2.1.17", null).unsafe().dangerous().whitelist(cTypeFilename));
> 
> 		mListHook.add(new Hook("system", "getInstalledApplications", "", 1, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "getInstalledPackages", "", 1, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "getPackagesForUid", "", 1, "2.1.17", null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "getPackagesHoldingPermissions", "", 18, "1.99.1", null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "getPreferredActivities", "", 1, "1.99.44", null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "getPreferredPackages", "", 1, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "queryBroadcastReceivers", "", 1, null, null).dangerous());
> 		mListHook.add(new Hook("system", "queryContentProviders", "", 1, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "queryIntentActivities", "", 1, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "queryIntentActivityOptions", "", 1, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "queryIntentContentProviders", "", 19, "1.99.1", null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "queryIntentServices", "", 1, null, null).notAOSP(19).dangerous());
> 
> 		mListHook.add(new Hook("system", "Srv_getPackageInfo", "", 19, "2.99.30", null).AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getApplicationInfo", "", 19, "2.99.30", null).AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getInstalledApplications", "", 19, "2.99", "getInstalledApplications").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getInstalledPackages", "", 19, "2.99", "getInstalledPackages").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getPackagesForUid", "", 19, "2.99", "getPackagesForUid").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getPackagesHoldingPermissions", "", 19, "2.99", "getPackagesHoldingPermissions").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getPersistentApplications", "", 19, "2.99", null).AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getPreferredPackages", "", 19, "2.99", "getPreferredPackages").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_queryContentProviders", "", 19, "2.99", "queryContentProviders").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_queryIntentActivities", "", 19, "2.99", "queryIntentActivities").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_queryIntentActivityOptions", "", 19, "2.99", "queryIntentActivityOptions").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_queryIntentContentProviders", "", 19, "2.99", "queryIntentContentProviders").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_queryIntentReceivers", "", 19, "2.99", "queryBroadcastReceivers").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_queryIntentServices", "", 19, "2.99", "queryIntentServices").AOSP(19).dangerous());
> 
> 		mListHook.add(new Hook("system", "getInstalledProviders", "", 3, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getInstalledProviders", "", 3, "2.99", "getInstalledProviders").AOSP(19).dangerous());
> 
> 		mListHook.add(new Hook("system", "getRecentTasks", "GET_TASKS", 1, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "getRunningAppProcesses", "", 3, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "getRunningServices", "", 1, null, null).notAOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "getRunningTasks", "GET_TASKS", 1, null, null).notAOSP(19).dangerous());
> 
> 		mListHook.add(new Hook("system", "Srv_getRecentTasks", "GET_TASKS", 1, "2.99", "getRecentTasks").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getRunningAppProcesses", "", 3, "2.99", "getRunningAppProcesses").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getServices", "", 1, "2.99", "getRunningServices").AOSP(19).dangerous());
> 		mListHook.add(new Hook("system", "Srv_getTasks", "GET_TASKS", 1, "2.99", "getRunningTasks").AOSP(19).dangerous());
> 
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_ADDED, "", 1, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_REPLACED, "", 3, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_RESTARTED, "", 1, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_REMOVED, "", 1, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_CHANGED, "", 1, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_DATA_CLEARED, "", 3, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_FIRST_LAUNCH, "", 12, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_FULLY_REMOVED, "", 14, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_NEEDS_VERIFICATION, "", 14, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_PACKAGE_VERIFIED, "", 17, "2.2.2", null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE, "", 8, null, null).dangerous());
> 		mListHook.add(new Hook("system", Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE, "", 8, null, null).dangerous());
> 
> 		mListHook.add(new Hook("system", "ApplicationsProvider", "", 1, null, null).to(18));
> 
> 		mListHook.add(new Hook("system", "checkPermission", "", 1, "2.1.24", null).AOSP(19).dangerous().whitelist(cTypePermission));
> 		mListHook.add(new Hook("system", "checkUidPermission", "", 1, "2.1.24", null).AOSP(19).dangerous().whitelist(cTypePermission));
> 
> 		mListHook.add(new Hook("system", "IntentFirewall", "", 19, "2.2.2", null).AOSP(19).dangerous().whitelist(cTypeAction));
> 
> 		mListHook.add(new Hook("view", "loadUrl", "", 1, null, null).unsafe().whitelist(cTypeUrl));
> 		mListHook.add(new Hook("view", "WebView", "", 1, null, null).unsafe());
> 		mListHook.add(new Hook("view", "getDefaultUserAgent", "", 17, null, null).unsafe());
> 		mListHook.add(new Hook("view", "getUserAgent", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("view", "getUserAgentString", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("view", "setUserAgent", "", 3, null, null).unsafe());
> 		mListHook.add(new Hook("view", "setUserAgentString", "", 3, null, null).unsafe());
> 
> 		mListHook.add(new Hook("view", Intent.ACTION_VIEW, "", 1, null, null).notAOSP(19).doNotify().whitelist(cTypeUrl));
> 		mListHook.add(new Hook("view", "Srv_" + Intent.ACTION_VIEW, "", 19, "2.99", Intent.ACTION_VIEW).AOSP(19).doNotify().whitelist(cTypeUrl));
> 
> 		mListHook.add(new Hook("view", "GMS5.view", "", 1, "2.99.27", null).unsafe());
> 
> 		// AccountManager
> 		mListHook.add(new Hook(null, "removeOnAccountsUpdatedListener", "", 5, null, null));
> 
> 		// Activity
> 		mListHook.add(new Hook(null, "startActivities", "", 1, null, null).notAOSP(19));
> 		mListHook.add(new Hook(null, "startActivity", "", 1, null, null).notAOSP(19));
> 		mListHook.add(new Hook(null, "startActivityForResult", "", 1, null, null).notAOSP(19));
> 		mListHook.add(new Hook(null, "startActivityFromChild", "", 1, null, null).notAOSP(19));
> 		mListHook.add(new Hook(null, "startActivityFromFragment", "", 1, null, null).notAOSP(19));
> 		mListHook.add(new Hook(null, "startActivityIfNeeded", "", 1, null, null).notAOSP(19));
> 		mListHook.add(new Hook(null, "startNextMatchingActivity", "", 1, null, null).notAOSP(19));
> 
> 		// ActivityThread / MessageQueue
> 		mListHook.add(new Hook(null, "next", "", 1, null, null).notAOSP(19).optional());
> 		mListHook.add(new Hook(null, "handleReceiver", "", 1, null, null).notAOSP(19).optional());
> 
126a512,514
> 		// AppIndexApi
> 		mListHook.add(new Hook(null, "GMS5.viewEnd", "", 1, null, null));
> 
129a518,520
> 		// AudioRecord
> 		mListHook.add(new Hook(null, "Audio.stop", "", 3, null, null));
> 
133a525,536
> 		// ClipboardManager/Service
> 		mListHook.add(new Hook(null, "removePrimaryClipChangedListener", "", 11, null, null).notAOSP(19));
> 		mListHook.add(new Hook(null, "Srv_removePrimaryClipChangedListener", "", 11, null, null));
> 
> 		// Content resolvers
> 		mListHook.add(new Hook(null, "query", "", 1, null, null).notAOSP(19));
> 		mListHook.add(new Hook(null, "Srv_call", "", 1, null, null).AOSP(19));
> 		mListHook.add(new Hook(null, "Srv_query", "", 1, null, null).AOSP(19));
> 
> 		// Camera
> 		mListHook.add(new Hook(null, "Camera.stopPreview", "", 1, null, null));
> 
147a551,553
> 		// IntentFirewall
> 		mListHook.add(new Hook(null, "checkIntent", "", 19, null, null));
> 
159a566,572
> 		// MediaRecorder
> 		mListHook.add(new Hook(null, "MediaRecorder.prepare", "", 1, null, null));
> 		mListHook.add(new Hook(null, "MediaRecorder.stop", "", 1, null, null));
> 
> 		// Resources
> 		mListHook.add(new Hook(null, "updateConfiguration", "", 1, null, null));
> 
165a579,585
> 
> 		// WebView
> 		mListHook.add(new Hook(null, "getSettings", "", 1, null, null));
> 
> 		// WindowManagerImpl
> 		mListHook.add(new Hook(null, "removeView", "", 1, null, null));
> 		mListHook.add(new Hook(null, "updateViewLayout", "", 1, null, null));
-------------
----- PackageChange.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- PRestriction.aidl
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- PRestriction.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- PrivacyManager.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
65,67c65,67
< 	private static final String cRestrictionNames[] = new String[] { /*cAccounts, cBrowser, cCalendar, cCalling,
< 			cClipboard, cContacts, cDictionary, cEMail, cIdentification, cInternet, cIPC,*/ cLocation/*, cMedia, cMessages,
< 			cNetwork, cNfc, cNotifications, cOverlay, cPhone, cSensors, cShell, cStorage, cSystem, cView*/ };
---
> 	private static final String cRestrictionNames[] = new String[] { cAccounts, cBrowser, cCalendar, cCalling,
> 			cClipboard, cContacts, cDictionary, cEMail, cIdentification, cInternet, cIPC, cLocation, cMedia, cMessages,
> 			cNetwork, cNfc, cNotifications, cOverlay, cPhone, cSensors, cShell, cStorage, cSystem, cView };
69,70c69,70
< 	public static List<String> cMethodNoState = Arrays.asList(new String[] { /*"IntentFirewall", "checkPermission",
< 			"checkUidPermission"*/ });
---
> 	public static List<String> cMethodNoState = Arrays.asList(new String[] { "IntentFirewall", "checkPermission",
> 			"checkUidPermission" });
352c352
< 			Util.log(hook, Log.ERROR, restrictionName + " has unknown method " + methodName);
---
> 			Util.log(hook, Log.ERROR, "Unknown method=" + methodName);
-------------
----- PrivacyProvider.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
32c32
< 	private static final String AUTHORITY = "org.thoughtland.xlocation.provider";
---
> 	private static final String AUTHORITY = "biz.bokhorst.xprivacy.provider";
552c552
< 				if (file.getName().startsWith("org.thoughtland.xlocation.provider.") && file.getName().endsWith(".xml")
---
> 				if (file.getName().startsWith("biz.bokhorst.xprivacy.provider.") && file.getName().endsWith(".xml")
579c579
< 				+ File.separator + "org.thoughtland.xlocation.provider.xml");
---
> 				+ File.separator + "biz.bokhorst.xprivacy.provider.xml");
-------------
----- PrivacyService.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
82c82
< 	private static final String cServiceName = "xlocation386";
---
> 	private static final String cServiceName = "xprivacy386";
117c117
< 	// sqlite3 /data/system/xlocation/xlocation.db
---
> 	// sqlite3 /data/system/xprivacy/xprivacy.db
218,219c218,219
< 				Log.w("XLocation", "No client for " + restriction);
< 				Log.w("XLocation", Log.getStackTraceString(new Exception("StackTrace")));
---
> 				Log.w("XPrivacy", "No client for " + restriction);
> 				Log.w("XPrivacy", Log.getStackTraceString(new Exception("StackTrace")));
234,235c234,235
< 				Log.w("XLocation", "No client for " + setting + " uid=" + Process.myUid() + " pid=" + Process.myPid());
< 				Log.w("XLocation", Log.getStackTraceString(new Exception("StackTrace")));
---
> 				Log.w("XPrivacy", "No client for " + setting + " uid=" + Process.myUid() + " pid=" + Process.myPid());
> 				Log.w("XPrivacy", Log.getStackTraceString(new Exception("StackTrace")));
1044c1044
< 					new File("/data/system/xlocation/aosp").delete();
---
> 					new File("/data/system/xprivacy/aosp").delete();
1046c1046
< 					new File("/data/system/xlocation/aosp").createNewFile();
---
> 					new File("/data/system/xprivacy/aosp").createNewFile();
1416c1416
< 				if (!getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false))
---
> 				if (!getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false))
2263,2264c2263,2264
< 		return new File(Environment.getDataDirectory() + File.separator + "system" + File.separator + "xlocation"
< 				+ File.separator + "xlocation.db");
---
> 		return new File(Environment.getDataDirectory() + File.separator + "system" + File.separator + "xprivacy"
> 				+ File.separator + "xprivacy.db");
2268c2268
< 		return new File(Environment.getDataDirectory() + File.separator + "system" + File.separator + "xlocation"
---
> 		return new File(Environment.getDataDirectory() + File.separator + "system" + File.separator + "xprivacy"
2285,2286c2285,2286
< 			// Move database from data/xlocation folder
< 			File folder = new File(Environment.getDataDirectory() + File.separator + "xlocation");
---
> 			// Move database from data/xprivacy folder
> 			File folder = new File(Environment.getDataDirectory() + File.separator + "xprivacy");
2291c2291
< 						if (file.getName().startsWith("xlocation.db") || file.getName().startsWith("usage.db")) {
---
> 						if (file.getName().startsWith("xprivacy.db") || file.getName().startsWith("usage.db")) {
2306c2306
< 						if (file.getName().startsWith("xlocation.db")) {
---
> 						if (file.getName().startsWith("xprivacy.db")) {
2322c2322
< 					if (file.getName().startsWith("xlocation.db") || file.getName().startsWith("usage.db"))
---
> 					if (file.getName().startsWith("xprivacy.db") || file.getName().startsWith("usage.db"))
2364c2364
< 						File dbBackup = new File(dbFile.getParentFile() + File.separator + "xlocation.backup");
---
> 						File dbBackup = new File(dbFile.getParentFile() + File.separator + "xprivacy.backup");
2657c2657
< 								"/cache/xlocation.log", true));
---
> 								"/cache/xprivacy.log", true));
-------------
----- PSetting.aidl
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- PSetting.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- Requirements.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
48c48
< 							androidIntent.setData(Uri.parse("https://github.com/M66B/XLocation#installation"));
---
> 							androidIntent.setData(Uri.parse("https://github.com/M66B/XPrivacy#installation"));
56c56
< 		// Check if XLocation is enabled
---
> 		// Check if XPrivacy is enabled
215,218c215,244
< 							if (mapService.containsKey(name))
< 								checkDescriptor = true;
< 							else
< 								listMissing.add(name);
---
> 							if (name.equals("telephony.registry")) {
> 								if (mapService.containsKey(name))
> 									checkDescriptor = true;
> 								else if (!mapService.containsKey("telephony.msim.registry"))
> 									listMissing.add(name);
> 
> 							} else if (name.equals("telephony.msim.registry")) {
> 								if (mapService.containsKey(name))
> 									checkDescriptor = true;
> 								else if (!mapService.containsKey("telephony.registry"))
> 									listMissing.add(name);
> 
> 							} else if (name.equals("bluetooth")) {
> 								if (mapService.containsKey(name))
> 									checkDescriptor = true;
> 								else if (!mapService.containsKey("bluetooth_manager"))
> 									listMissing.add(name);
> 
> 							} else if (name.equals("bluetooth_manager")) {
> 								if (mapService.containsKey(name))
> 									checkDescriptor = true;
> 								else if (!mapService.containsKey("bluetooth"))
> 									listMissing.add(name);
> 
> 							} else {
> 								if (mapService.containsKey(name))
> 									checkDescriptor = true;
> 								else
> 									listMissing.add(name);
> 							}
246a273,298
> 		// Check wifi info
> 		if (!checkField(WifiInfo.class, "mSupplicantState") || !checkField(WifiInfo.class, "mBSSID")
> 				|| !checkField(WifiInfo.class, "mIpAddress") || !checkField(WifiInfo.class, "mMacAddress")
> 				|| !(checkField(WifiInfo.class, "mSSID") || checkField(WifiInfo.class, "mWifiSsid")))
> 			reportClass(WifiInfo.class, context);
> 
> 		// Check mWifiSsid.octets
> 		if (checkField(WifiInfo.class, "mWifiSsid"))
> 			try {
> 				Class<?> clazz = Class.forName("android.net.wifi.WifiSsid", false, null);
> 				try {
> 					clazz.getDeclaredMethod("createFromAsciiEncoded", String.class);
> 				} catch (NoSuchMethodException ex) {
> 					reportClass(clazz, context);
> 				}
> 			} catch (ClassNotFoundException ex) {
> 				sendSupportInfo(ex.toString(), context);
> 			}
> 
> 		// Check Inet4Address/ANY
> 		try {
> 			Inet4Address.class.getDeclaredField("ANY");
> 		} catch (Throwable ex) {
> 			reportClass(Inet4Address.class, context);
> 		}
> 
247a300,308
> 		checkService(context, Context.ACCOUNT_SERVICE,
> 				new String[] { "android.accounts.AccountManager", "com.intel.arkham.ExtendAccountManager" /* Asus */,
> 						"android.privacy.surrogate.PrivacyAccountManager" /* PDroid */});
> 		checkService(context, Context.ACTIVITY_SERVICE, new String[] { "android.app.ActivityManager",
> 				"android.app.ActivityManagerEx" });
> 		checkService(context, Context.CLIPBOARD_SERVICE, new String[] { "android.content.ClipboardManager" });
> 		checkService(context, Context.CONNECTIVITY_SERVICE,
> 				new String[] { "android.net.ConnectivityManager", "android.net.MultiSimConnectivityManager",
> 						"android.privacy.surrogate.PrivacyConnectivityManager" /* PDroid */});
250a312,323
> 		Class<?> serviceClass = context.getPackageManager().getClass();
> 		if (!"android.app.ApplicationPackageManager".equals(serviceClass.getName()))
> 			reportClass(serviceClass, context);
> 		checkService(context, Context.SENSOR_SERVICE, new String[] { "android.hardware.SensorManager",
> 				"android.hardware.SystemSensorManager" });
> 		checkService(context, Context.TELEPHONY_SERVICE, new String[] { "android.telephony.TelephonyManager",
> 				"android.telephony.MSimTelephonyManager", "android.telephony.MultiSimTelephonyManager",
> 				"android.telephony.ZTEPrivacyTelephonyManager", "android.telephony.ZTEPrivacyMSimTelephonyManager",
> 				"com.motorola.android.telephony.MotoTelephonyManager",
> 				"android.privacy.surrogate.PrivacyTelephonyManager" /* PDroid */});
> 		checkService(context, Context.WINDOW_SERVICE, new String[] { "android.view.WindowManagerImpl",
> 				"android.view.Window$LocalWindowManager" });
335c408
< 							sb.insert(0, String.format("Override: %s\r\n", System.getenv("XLocation.AOSP")));
---
> 							sb.insert(0, String.format("Override: %s\r\n", System.getenv("XPrivacy.AOSP")));
347c420
< 							sb.insert(0, String.format("XLocation: %s\r\n", ourVersion));
---
> 							sb.insert(0, String.format("XPrivacy: %s\r\n", ourVersion));
351,352c424,425
< 							sendEmail.putExtra(Intent.EXTRA_EMAIL, new String[] { "marcel+xlocation@faircode.eu" });
< 							sendEmail.putExtra(Intent.EXTRA_SUBJECT, "XLocation " + ourVersion + " debug info");
---
> 							sendEmail.putExtra(Intent.EXTRA_EMAIL, new String[] { "marcel+xprivacy@faircode.eu" });
> 							sendEmail.putExtra(Intent.EXTRA_SUBJECT, "XPrivacy " + ourVersion + " debug info");
-------------
----- RState.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
75c75
< 		boolean odSystem = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false);
---
> 		boolean odSystem = PrivacyManager.getSettingBool(userId, PrivacyManager.cSettingOnDemandSystem, false);
-------------
----- SharedPreferencesEx.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- UpdateService.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
25,26c25,26
< 	public static final String cFlush = "org.thoughtland.xlocation.action.FLUSH";
< 	public static final String cUpdate = "org.thoughtland.xlocation.action.UPDATE";
---
> 	public static final String cFlush = "biz.bokhorst.xprivacy.action.FLUSH";
> 	public static final String cUpdate = "biz.bokhorst.xprivacy.action.UPDATE";
-------------
----- Util.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
53c53
< 	private static boolean mPro = true;
---
> 	private static boolean mPro = false;
59c59
< 	private static String LICENSE_FILE_NAME = "XLocation_license.txt";
---
> 	private static String LICENSE_FILE_NAME = "XPrivacy_license.txt";
84c84
< 				Log.println(priority, "XLocation", msg);
---
> 				Log.println(priority, "XPrivacy", msg);
86c86
< 				Log.println(priority, String.format("XLocation/%s", hook.getClass().getSimpleName()), msg);
---
> 				Log.println(priority, String.format("XPrivacy/%s", hook.getClass().getSimpleName()), msg);
132c132
< 		boolean xlocation = false;
---
> 		boolean xprivacy = false;
134,135c134,135
< 			if (frame.getClassName() != null && frame.getClassName().startsWith("org.thoughtland.xlocation")) {
< 				xlocation = true;
---
> 			if (frame.getClassName() != null && frame.getClassName().startsWith("biz.bokhorst.xprivacy")) {
> 				xprivacy = true;
138c138
< 		if (!xlocation)
---
> 		if (!xprivacy)
168c168
< 		log(null, Log.WARN, "XLocation not enabled");
---
> 		log(null, Log.WARN, "XPrivacy not enabled");
263c263
< 			licenseFile = new File(storageDir + File.separator + ".xlocation" + File.separator + LICENSE_FILE_NAME);
---
> 			licenseFile = new File(storageDir + File.separator + ".xprivacy" + File.separator + LICENSE_FILE_NAME);
457c457
< 		InputStreamReader isr = new InputStreamReader(context.getAssets().open("XLocation_public_key.txt"), "UTF-8");
---
> 		InputStreamReader isr = new InputStreamReader(context.getAssets().open("XPrivacy_public_key.txt"), "UTF-8");
-------------
----- Version.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XActivityManagerService.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XActivityRecognitionApi.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XActivityRecognitionClient.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XApplication.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
22,23c22,23
< 	public static String ACTION_MANAGE_PACKAGE = "org.thoughtland.xlocation.ACTION_MANAGE_PACKAGE";
< 	public static String PERMISSION_MANAGE_PACKAGES = "org.thoughtland.xlocation.MANAGE_PACKAGES";
---
> 	public static String ACTION_MANAGE_PACKAGE = "biz.bokhorst.xprivacy.ACTION_MANAGE_PACKAGE";
> 	public static String PERMISSION_MANAGE_PACKAGES = "biz.bokhorst.xprivacy.MANAGE_PACKAGES";
-------------
----- XBinder.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
40c40
< 		/*"account",
---
> 		"account",
44,45c44,45
< 		"content",*/
< 		"location",/*
---
> 		"content",
> 		"location",
51,52c51,52
< 		"window",*/
< 		"wifi"/*,
---
> 		"window",
> 		"wifi",
65c65
< 		"<noname>"*/
---
> 		"<noname>"
71c71
< 		/*"android.accounts.IAccountManager",
---
> 		"android.accounts.IAccountManager",
75,76c75,76
< 		"android.content.IContentService",*/
< 		"android.location.ILocationManager",/*
---
> 		"android.content.IContentService",
> 		"android.location.ILocationManager",
82,83c82,83
< 		"android.view.IWindowManager",*/
< 		"android.net.wifi.IWifiManager"/*,
---
> 		"android.view.IWindowManager",
> 		"android.net.wifi.IWifiManager",
96c96
< 		"android.view.IWindowSession"*/
---
> 		"android.view.IWindowSession"
104c104
< 		/*"<noname>",
---
> 		"<noname>",
111c111
< 		"bluetooth_manager"*/
---
> 		"bluetooth_manager"
325c325
< 					reply.writeException(new SecurityException("XLocation"));
---
> 					reply.writeException(new SecurityException("XPrivacy"));
-------------
----- XConnectionCallbacks.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
58c58
< 						XLocation.hookAll(XFusedLocationApi.getInstances(fusedLocationApi), loader, getSecret());
---
> 						XPrivacy.hookAll(XFusedLocationApi.getInstances(fusedLocationApi), loader, getSecret());
74c74
< 						XLocation.hookAll(XActivityRecognitionApi.getInstances(activityRecognitionApi), loader,
---
> 						XPrivacy.hookAll(XActivityRecognitionApi.getInstances(activityRecognitionApi), loader,
75a76,91
> 				}
> 			} catch (ClassNotFoundException ex) {
> 				Util.log(this, Log.WARN, ex.toString());
> 			} catch (NoSuchFieldException ex) {
> 				Util.log(this, Log.WARN, ex.toString());
> 			}
> 
> 			// AppIndexApi
> 			try {
> 				Class<?> cApp = Class.forName("com.google.android.gms.appindexing.AppIndex", false, loader);
> 				Object appIndexApi = cApp.getDeclaredField("AppIndexApi").get(null);
> 				if (PrivacyManager.getTransient(appIndexApi.getClass().getName(), null) == null) {
> 					PrivacyManager.setTransient(appIndexApi.getClass().getName(), Boolean.toString(true));
> 
> 					if (appIndexApi != null)
> 						XPrivacy.hookAll(XAppIndexApi.getInstances(appIndexApi), loader, getSecret());
-------------
----- XContextImpl.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
47c47
< 				XLocation.handleGetSystemService("PackageManager", param.getResult().getClass().getName(), getSecret());
---
> 				XPrivacy.handleGetSystemService("PackageManager", param.getResult().getClass().getName(), getSecret());
54c54
< 				XLocation.handleGetSystemService(name, instance.getClass().getName(), getSecret());
---
> 				XPrivacy.handleGetSystemService(name, instance.getClass().getName(), getSecret());
-------------
----- XFusedLocationApi.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XGoogleApiClient.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
56c56
< 					XLocation.hookAll(XConnectionCallbacks.getInstances(param.args[0]), clazz.getClassLoader(),
---
> 					XPrivacy.hookAll(XConnectionCallbacks.getInstances(param.args[0]), clazz.getClassLoader(),
-------------
----- XGoogleAuthUtil.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
54c54
< 					param.setThrowable(new IOException("XLocation"));
---
> 					param.setThrowable(new IOException("XPrivacy"));
-------------
----- XGoogleMapV1.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XGoogleMapV2.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XHook.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XLocationClient.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XLocation.java
-------------
----- XLocationManager.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XParam.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XSettingsSecure.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XTelephonyManager.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
149c149
< /*
---
> 
158c158
< */
---
> 
160c160
< /*
---
> 
165c165
< */
---
> 
167c167
< /*			listHook.add(new XTelephonyManager(Methods.listen, PrivacyManager.cPhone, className));
---
> 			listHook.add(new XTelephonyManager(Methods.listen, PrivacyManager.cPhone, className));
192c192
< */
---
> 
194c194
< //			listHook.add(new XTelephonyManager(Methods.Srv_listen, PrivacyManager.cPhone, Srv.Registry));
---
> 			listHook.add(new XTelephonyManager(Methods.Srv_listen, PrivacyManager.cPhone, Srv.Registry));
202c202
< 		//listHook.add(new XTelephonyManager(Methods.Srv_disableLocationUpdates, null, Srv.Phone));
---
> 		listHook.add(new XTelephonyManager(Methods.Srv_disableLocationUpdates, null, Srv.Phone));
-------------
----- XUtilHook.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
-------------
----- XWifiManager.java
1c1
< package org.thoughtland.xlocation;
---
> package biz.bokhorst.xprivacy;
54,55d53
< 		getScanResults, Srv_getScanResults
< 		/*
58d55
< */
67c64
< /*
---
> 
73c70
< */
---
> 
79,81c76,78
< //			listHook.add(new XWifiManager(Methods.getConnectionInfo, PrivacyManager.cInternet, className));
< //			listHook.add(new XWifiManager(Methods.Srv_getConnectionInfo, PrivacyManager.cInternet,
< //					"com.android.server.wifi.WifiService"));
---
> 			listHook.add(new XWifiManager(Methods.getConnectionInfo, PrivacyManager.cInternet, className));
> 			listHook.add(new XWifiManager(Methods.Srv_getConnectionInfo, PrivacyManager.cInternet,
> 					"com.android.server.wifi.WifiService"));
96d92
< 		/*
196c192
< */
---
> 
203c199
< /*
---
> 
210c206
< */
---
> 
-------------
